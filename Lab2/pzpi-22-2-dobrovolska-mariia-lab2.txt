Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії


Звіт
З лабораторної роботи №2

З дисципліни «Архітектура програмного забезпечення» 
на тему: «РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ СИСТЕМИ »



Виконала:
ст. гр. ПЗПІ-22-2						Добровольська М. А.




Перевірив:
ст. викладач каф. ПІ						Сокорчук І. П.












Харків 2025 
1	ІСТОРІЯ ЗМІН


№	Дата	      Версія звіту	Опис	змін	та виправлень
1	17.05.2025	0.1	          Створено	розділ «Завдання»
2	18.05.2025	0.1	          Створено	розділ «Опис	виконаної роботи»
3	19.05.2025	0.1	          Наповнено	додатки А та Б
4	19.05.2025	0.1	          Підбито	висновки роботи
5	19.05.2025	0.1	          Заповнено додаток В з програмним кодом




2	ЗАВДАННЯ

Метою даного лабораторного заняття є втілення функцій бізнес логіки та функцій адміністрування системи.


3	ОПИС ВИКОНАНОЇ РОБОТИ

У процесі розробки було підготовлено відеозвіт, посилання на який наведено у додатку А.
У межах виконання проєкту було створено програмну систему, яка забезпечує зручний та ефективний контроль процесу інкубації яєць. Основний акцент зроблено на можливості підключення інкубаційних пристроїв, постійного моніторингу основних показників (температури, вологості та рівня освітленості), надання користувачу інформативної аналітики.
Крім основного функціоналу моніторингу, у систему інтегровано модуль оповіщення, що забезпечує оперативне інформування користувача про критичні зміни параметрів, наприклад, перегрів або надто низький рівень вологості. Це дозволяє швидко вжити заходів — відкоригувати параметри або перевірити стан пристрою.
Також реалізовано адміністративну панель, яка надає можливість управління обліковими записами користувачів (підвисити статус, або видалити), а також передбачене автоматичне резервне копіювання бази даних Mongo, у якій зберігаються всі дані про інкубаційні цикли та події. Це сприяє захисту інформації та забезпеченню стабільної роботи системи.
Передбачено кілька рівнів доступу: адміністратор має повний контроль над системою, у тому числі зміну параметрів, перегляд всіх користувачів; доступ до моніторингу та перегляду аналітики.


ВИСНОВКИ

У результаті реалізації проєкту вдалося створити ключові компоненти програмного забезпечення для автоматизованого контролю інкубаційних процесів, з використанням математичних методів аналізу даних. Окрему увагу приділено системі сповіщень, яка забезпечує інформування про нестандартні ситуації у режимі реального часу, та реалізації адміністративного інтерфейсу з керуванням доступом користувачів до системи.

 
ДОДАТОК А
Відеозапис

Відеозапис	презентації	результатів	лабораторної	роботи:
Відеозапис доповіді на YouTube: https://youtu.be/h7QL7Hc4wwM



Хронологічний опис відеозапису: 

00:30 - Authentication
02:03 - Device Management
05:06 - Sensor Data
05:57 - Alert Management
08:06 - Admin Only
09:03 - Health & Inf 
ДОДАТОК Б
Графічні матеріали

Рисунок Б.1 — ER-діаграма даних 


Рисунок Б.2 — Структура бази даних


Рисунок Б.3 — UML-діаграма прецедентів
 

Рисунок Б.4 – Діаграма діяльності для підключення ТЗ
 

 

Рисунок Б.5– Діаграма діяльності для статистики девайсу 

ДОДАТОК В

Програмний код


В.1 Математична обробка прикладних даних. Код файлу з розрахунком статистики по диним девайсу та створення звіту.

GitHub репозиторій: https://github.com/NureDobrovolskaMariia/apz-pzpi-22-2-dobrovolska-mariia/blob/main/Lab2/pzpi-22-2-dobrovolska-mariia-lab2/server/controllers/dataController.js

1	// Get data statistics
2	const getDataStatistics = catchAsync(async (req, res, next) => {
3	const { deviceId } = req.params;
4	const { days = 7 } = req.query;

5	// Verify device ownership
6	const device = await Device.findOne({
7	deviceId,
8	userId: req.user.id,
9	isActive: true
10	});

11	if (!device) {
12	return next(new AppError('Device not found', 404));
13	}

14	const startDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000);

15	const stats = await SensorData.aggregate([
16	{
17	$match: {
18	deviceId,
19	timestamp: { $gte: startDate }
20	}
21	},
22	{
23	$group: {
24	_id: null,
25	totalDataPoints: { $sum: 1 },
26	avgTemperature: { $avg: '$temperature' },
27	avgHumidity: { $avg: '$humidity' },
28	avgLightLevel: { $avg: '$lightLevel' },
29	minTemperature: { $min: '$temperature' },
30	maxTemperature: { $max: '$temperature' },
31	minHumidity: { $min: '$humidity' },
32	maxHumidity: { $max: '$humidity' },
33	minLightLevel: { $min: '$lightLevel' },
34	maxLightLevel: { $max: '$lightLevel' },
35	firstReading: { $min: '$timestamp' },
36	lastReading: { $max: '$timestamp' }
37	}
38	}
39	]);

40	// Calculate temperature and humidity variance
41	const variance = await SensorData.aggregate([
42	{
43	$match: {
44	deviceId,
45	timestamp: { $gte: startDate }
46	}
47	},
48	{
49	$group: {
50	_id: null,
51	tempVariance: { $stdDevPop: '$temperature' },
52	humidityVariance: { $stdDevPop: '$humidity' }
53	}
54	}
55	]);

56	const result = stats[0] || {};
57	if (variance[0]) {
58	result.temperatureStdDev = variance[0].tempVariance;
59	result.humidityStdDev = variance[0].humidityVariance;
60	}

61	res.status(200).json({
62	status: 'success',
63	period: `${days} days`,
64	data: {
65	statistics: result
66	}
67	});
68	});

69	// Export data (CSV format)
70	const exportData = catchAsync(async (req, res, next) => {
71	const { deviceId } = req.params;
72	const { startDate, endDate, format = 'json' } = req.query;

73	// Verify device ownership
74	const device = await Device.findOne({
75	deviceId,
76	userId: req.user.id,
77	isActive: true
78	});

79	if (!device) {
80	return next(new AppError('Device not found', 404));
81	}

82	// Build query
83	const query = { deviceId };
84	if (startDate || endDate) {
85	query.timestamp = {};
86	if (startDate) query.timestamp.$gte = new Date(startDate);
87	if (endDate) query.timestamp.$lte = new Date(endDate);
88	}

89	// Limit export to prevent large downloads
90	const data = await SensorData.find(query)
91	.sort({ timestamp: -1 })
92	.limit(10000) // Limit to 10k records
93	.select('temperature humidity lightLevel timestamp -_id');

94	if (format === 'csv') {
95	// Convert to CSV
96	const csvHeader = 'timestamp,temperature,humidity,lightLevel\n';
97	const csvData = data.map(row => 
98	`${row.timestamp.toISOString()},${row.temperature},${row.humidity},${row.lightLevel}`
99	).join('\n');

100	res.setHeader('Content-Type', 'text/csv');
101	res.setHeader('Content-Disposition', `attachment; filename="${deviceId}-data.csv"`);
102	res.send(csvHeader + csvData);
103	} else {
104	// Return JSON
105	res.status(200).json({
106	status: 'success',
107	deviceId,
108	exportedAt: new Date().toISOString(),
109	results: data.length,
110	data: {
111	sensorData: data
112	}
113	});
114	}
115	});



В.2 Математична обробка даних. Код файлу з розрахунком статистики по усім девайсам.

1	// Get device statistics
2	const getDeviceStats = catchAsync(async (req, res, next) => {
3	const { deviceId } = req.params;

4	const device = await Device.findOne({
5	deviceId,
6	userId: req.user.id,
7	isActive: true
8	});

9	if (!device) {
10	return next(new AppError('Device not found', 404));
11	}

12	const now = new Date();
13	const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
14	const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

15	// Get uptime percentage (last 24 hours)
16	const totalMinutes = 24 * 60;
17	const dataPoints = await SensorData.countDocuments({
18	deviceId,
19	timestamp: { $gte: oneDayAgo }
20	});
21	const expectedDataPoints = totalMinutes / 0.5; // Data every 30 seconds
22	const uptimePercentage = Math.min(100, (dataPoints / expectedDataPoints) * 100);

23	// Get average conditions (last 24 hours)
24	const avgConditions = await SensorData.aggregate([
25	{
26	$match: {
27	deviceId,
28	timestamp: { $gte: oneDayAgo }
29	}
30	},
31	{
32	$group: {
33	_id: null,
34	avgTemperature: { $avg: '$temperature' },
35	avgHumidity: { $avg: '$humidity' },
36	avgLightLevel: { $avg: '$lightLevel' },
37	minTemperature: { $min: '$temperature' },
38	maxTemperature: { $max: '$temperature' },
39	minHumidity: { $min: '$humidity' },
40	maxHumidity: { $max: '$humidity' }
41	}
42	}
43	]);

44	// Get alerts count (last week)
45	const alertsCount = await Alert.countDocuments({
46	deviceId,
47	createdAt: { $gte: oneWeekAgo }
48	});

49	// Get unresolved alerts
50	const unresolvedAlerts = await Alert.countDocuments({
51	deviceId,
52	isResolved: false
53	});

54	res.status(200).json({
55	status: 'success',
56	data: {
57	deviceId,
58	uptimePercentage: Math.round(uptimePercentage * 100) / 100,
59	averageConditions: avgConditions[0] || null,
60	alertsLastWeek: alertsCount,
61	unresolvedAlerts,
62	deviceAge: Math.floor((now - device.createdAt) / (1000 * 60 * 60 * 24)), // days
63	lastSeen: device.lastSeen
64	}
65	});
66	});

67	// Quick device actions
68	const quickActions = catchAsync(async (req, res, next) => {
69	const { action } = req.body;
70	const { deviceId } = req.params;

71	const device = await Device.findOne({
72	deviceId,
73	userId: req.user.id,
74	isActive: true
75	});

76	if (!device) {
77	return next(new AppError('Device not found', 404));
78	}

79	let command = {};

80	switch (action) {
81	case 'turn_eggs':
82	command = { turn_eggs: true };
83	break;
84	case 'enable_auto':
85	command = { auto_mode: true };
86	break;
87	case 'disable_auto':
88	command = { auto_mode: false };
89	break;
90	case 'emergency_stop':
91	command = { 
92	auto_mode: false, 
93	heater: false, 
94	humidifier: false 
95	};
96	break;
97	default:
98	return next(new AppError('Invalid action', 400));
99	}

100	try {
101	mqttService.sendCommand(req.user.id, deviceId, command);

102	res.status(200).json({
103	status: 'success',
104	message: `Action '${action}' executed successfully`,
105	data: { action, command }
106	});
107	} catch (error) {
108	return next(new AppError('Failed to execute action', 500));
109	}
110	});

111	module.exports = {
112	getUserDevices,
113	getDevice,
114	registerDevice,
115	updateDevice,
116	deleteDevice,
117	sendCommand,
118	getDeviceStats,
119	quickActions
120	};

В.2 Адміністрування бізнес-логіки системи.
GitHub репозиторій: https://github.com/NureDobrovolskaMariia/apz-pzpi-22-2-dobrovolska-mariia


1	document.addEventListener('DOMContentLoaded', async () => {
2	    console.log('DOM Content Loaded for admin page.');
3	
4	    const token = localStorage.getItem('jwtToken');
5	    if (!token) {
6	        window.location.href = '/html/login.html';
7	        return;
8	    }
9	
10	    // Елементи навігації
11	    const userNameNav = document.getElementById('userNameNav');
12	    const userRoleNav = document.getElementById('userRoleNav');
13	    const adminPanelLink = document.getElementById('adminPanelLink'); 
14	    const logoutBtnDropdown = document.getElementById('logoutBtnDropdown');
15	    const userDropdownTrigger = document.getElementById('userDropdownTrigger');
16	    const userDropdown = document.getElementById('userDropdown');
17	
18	    // Елементи вкладок
19	    const tabLinks = document.querySelectorAll('.tab-link');
20	    const tabContents = document.querySelectorAll('.tab-content');
21	
22	    // Керування користувачами
23	    const usersTableBody = document.getElementById('usersTableBody');
24	    const userSearchInput = document.getElementById('userSearchInput');
25	    const userRoleFilter = document.getElementById('userRoleFilter');
26	    const userActiveFilter = document.getElementById('userActiveFilter');
27	    const applyUserFiltersBtn = document.getElementById('applyUserFiltersBtn');
28	    const prevUserPageBtn = document.getElementById('prevUserPageBtn');
29	    const currentUserPageSpan = document.getElementById('currentUserPageSpan');
30	    const nextUserPageBtn = document.getElementById('nextUserPageBtn');
31	    const userManagementMessage = document.getElementById('userManagementMessage');
32	    let currentUserPage = 1;
33	    const usersPerPage = 10;
34	
35	    // Модальне вікно редагування користувача
36	    const editUserRoleModal = document.getElementById('editUserRoleModal');
37	    const modalUserId = document.getElementById('modalUserId');
38	    const modalUserName = document.getElementById('modalUserName');
39	    const modalUserEmail = document.getElementById('modalUserEmail');
40	    const modalUserRoleSelect = document.getElementById('modalUserRoleSelect');
41	    const modalUserIsActive = document.getElementById('modalUserIsActive');
42	    const saveUserRoleBtn = document.getElementById('saveUserRoleBtn');
43	    const editUserModalMessage = document.getElementById('editUserModalMessage');
44	    const closeButton = editUserRoleModal.querySelector('.close-button');
45	
46	
47	    // Статистика платформи
48	    const platformStatsDaysFilter = document.getElementById('platformStatsDaysFilter');
49	    const platformStatsCards = document.getElementById('platformStatsCards');
50	    const userRegistrationChartCanvas = document.getElementById('userRegistrationChart');
51	    const deviceStatusChartCanvas = document.getElementById('deviceStatusChart');
52	    let userRegChartInstance, deviceStatusChartInstance;
53	
54	    // Моніторинг системи
55	    const serverInfoDisplay = document.getElementById('serverInfoDisplay');
56	    const healthCheckDisplay = document.getElementById('healthCheckDisplay');
57	    const refreshHealthCheckBtn = document.getElementById('refreshHealthCheckBtn');
58	    
59	    // --- Допоміжні функції ---
60	    function showUIMessage(element, type, text) {
61	        if (!element) return;
62	        element.textContent = text;
63	        element.className = `message-area ${type}`;
64	        element.style.display = 'block';
65	        setTimeout(() => { element.style.display = 'none'; }, 5000);
66	    }
67	
68	    if (userDropdownTrigger) {
69	        userDropdownTrigger.addEventListener('click', (e) => {
70	            e.stopPropagation(); userDropdown.classList.toggle('show');
71	        });
72	        window.addEventListener('click', (e) => {
73	            if (userDropdown.classList.contains('show') && !userDropdownTrigger.contains(e.target) && !userDropdown.contains(e.target)) {
74	                userDropdown.classList.remove('show');
75	            }
76	        });
77	    }
78	    if (logoutBtnDropdown) {
79	        logoutBtnDropdown.addEventListener('click', () => {
80	            localStorage.removeItem('jwtToken'); window.location.href = '/html/login.html';
81	        });
82	    }
83	    
84	    // --- Перевірка ролі та завантаження профілю для навігації ---
85	    async function initializeAdminPage() {
86	        try {
87	            const response = await fetch('/api/auth/profile', {
88	                headers: { 'Authorization': `Bearer ${token}` }
89	            });
90	            const data = await response.json();
91	            if (response.ok) {
92	                const user = data.data.user;
93	                userNameNav.textContent = user.name;
94	                userRoleNav.textContent = user.role.charAt(0).toUpperCase() + user.role.slice(1);
95	                if (user.role !== 'admin') {
96	                    alert('Доступ заборонено. Ця сторінка лише для адміністраторів.');
97	                    window.location.href = '/html/dashboard.html';
98	                    return;
99	                }
100	                adminPanelLink.style.display = 'block'; // Переконатися, що посилання видиме
101	                 loadTabData('user-management'); // Завантажити дані для першої вкладки
102	            } else {
103	                localStorage.removeItem('jwtToken'); window.location.href = '/html/login.html';
104	            }
105	        } catch (error) {
106	            console.error('Network error fetching profile:', error);
107	            localStorage.removeItem('jwtToken'); window.location.href = '/html/login.html';
108	        }
109	    }
110	
111	    // --- Логіка перемикання вкладок ---
112	    tabLinks.forEach(link => {
113	        link.addEventListener('click', () => {
114	            tabLinks.forEach(item => item.classList.remove('active'));
115	            tabContents.forEach(content => content.classList.remove('active'));
116	            link.classList.add('active');
117	            const targetTabId = link.dataset.tab + 'Tab';
118	            document.getElementById(targetTabId).classList.add('active');
119	            loadTabData(link.dataset.tab);
120	        });
121	    });
122	
123	    function loadTabData(tabId) {
124	        console.log("Loading data for tab:", tabId);
125	        switch (tabId) {
126	            case 'user-management':
127	                fetchUsers();
128	                break;
129	            case 'platform-stats':
130	                fetchPlatformStats();
131	                break;
132	            case 'system-monitoring':
133	                fetchSystemHealth();
134	                break;
135	        }
136	    }
137	
138	    // --- Керування користувачами ---
139	    async function fetchUsers() {
140	        const searchTerm = userSearchInput.value;
141	        const role = userRoleFilter.value;
142	        const isActive = userActiveFilter.value;
143	
144	        let query = `page=${currentUserPage}&limit=${usersPerPage}`;
145	        if (searchTerm) query += `&search=${encodeURIComponent(searchTerm)}`;
146	        if (role) query += `&role=${role}`;
147	        if (isActive !== "") query += `&isActive=${isActive}`;
148	
149	        usersTableBody.innerHTML = '<tr><td colspan="6">Завантаження користувачів...</td></tr>';
150	        try {
151	            const response = await fetch(`/api/users?${query}`, { //
152	                headers: { 'Authorization': `Bearer ${token}` }
153	            });
154	            const data = await response.json();
155	            if (response.ok) {
156	                displayUsersTable(data.data.users, data.pagination);
157	            } else {
158	                usersTableBody.innerHTML = `<tr><td colspan="6">Помилка: ${data.message}</td></tr>`;
159	            }
160	        } catch (error) {
161	            usersTableBody.innerHTML = `<tr><td colspan="6">Мережева помилка: ${error.message}</td></tr>`;
162	        }
163	    }
164	
165	    function displayUsersTable(users, pagination) {
166	        usersTableBody.innerHTML = '';
167	        if (users.length === 0) {
168	            usersTableBody.innerHTML = '<tr><td colspan="6">Користувачів не знайдено.</td></tr>';
169	        } else {
170	            users.forEach(user => {
171	                const row = usersTableBody.insertRow();
172	                row.insertCell().textContent = user._id;
173	                row.insertCell().textContent = user.name;
174	                row.insertCell().textContent = user.email;
175	                row.insertCell().textContent = user.role;
176	                row.insertCell().innerHTML = user.isActive ? 
177	                    '<span class="status-indicator status-online">Так</span>' : 
178	                    '<span class="status-indicator status-offline">Ні</span>';
179	
180	                const actionsCell = row.insertCell();
181	                const editBtn = document.createElement('button');
182	                editBtn.className = 'btn btn-sm primary-btn';
183	                editBtn.textContent = 'Редагувати';
184	                editBtn.onclick = () => openEditUserModal(user);
185	                actionsCell.appendChild(editBtn);
186	                
187	                const promoteBtn = document.createElement('button');
188	                promoteBtn.className = 'btn btn-sm secondary-btn ml-5';
189	                promoteBtn.textContent = 'Підвищити до Admin';
190	                promoteBtn.disabled = user.role === 'admin';
191	                promoteBtn.onclick = () => promoteUserToAdmin(user._id, user.name);
192	                actionsCell.appendChild(promoteBtn);
193	            });
194	        }
195	        currentUserPageSpan.textContent = `Сторінка ${pagination.page} з ${pagination.pages || 1}`;
196	        prevUserPageBtn.disabled = pagination.page === 1;
197	        nextUserPageBtn.disabled = pagination.page === pagination.pages || pagination.pages === 0;
198	    }
199	
200	    applyUserFiltersBtn.addEventListener('click', () => { currentUserPage = 1; fetchUsers(); });
201	    prevUserPageBtn.addEventListener('click', () => { if (currentUserPage > 1) { currentUserPage--; fetchUsers(); } });
202	    nextUserPageBtn.addEventListener('click', () => { currentUserPage++; fetchUsers(); });
203	
204	    function openEditUserModal(user) {
205	        modalUserId.value = user._id;
206	        modalUserName.textContent = user.name;
207	        modalUserEmail.textContent = user.email;
208	        modalUserRoleSelect.value = user.role;
209	        modalUserIsActive.checked = user.isActive;
210	        editUserModalMessage.style.display = 'none';
211	        editUserRoleModal.style.display = 'flex';
212	    }
213	    
214	    if(closeButton) {
215	       closeButton.onclick = () => editUserRoleModal.style.display = 'none';
216	    }
217	    window.onclick = (event) => {
218	      if (event.target == editUserRoleModal) {
219	        editUserRoleModal.style.display = "none";
220	      }
221	    }
222	
223	    saveUserRoleBtn.addEventListener('click', async () => {
224	        const userId = modalUserId.value;
225	        const newRole = modalUserRoleSelect.value;
226	        const isActive = modalUserIsActive.checked;
227	
228	        try {
229	            const response = await fetch(`/api/users/${userId}`, { 
230	                method: 'PATCH',
231	                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
232	                body: JSON.stringify({ role: newRole, isActive: isActive })
233	            });
234	            const data = await response.json();
235	            if (response.ok) {
236	                showUIMessage(editUserModalMessage, 'success', 'Дані користувача оновлено!');
237	                fetchUsers();
238	                setTimeout(() => { editUserRoleModal.style.display = 'none'; }, 1500);
239	            } else {
240	                showUIMessage(editUserModalMessage, 'error', `Помилка: ${data.message}`);
241	            }
242	        } catch (error) {
243	            showUIMessage(editUserModalMessage, 'error', `Мережева помилка: ${error.message}`);
244	        }
245	    });
246	
247	    async function promoteUserToAdmin(userId, userName) {
248	        if (!confirm(`Ви впевнені, що хочете підвищити користувача ${userName} (${userId}) до адміністратора?`)) {
249	            return;
250	        }
251	        try {
252	            const response = await fetch(`/api/users/${userId}/promote`, { 
253	                method: 'PATCH',
254	                headers: { 'Authorization': `Bearer ${token}` }
255	            });
256	            const data = await response.json();
257	            if (response.ok) {
258	                showUIMessage(userManagementMessage, 'success', data.message || 'Користувача підвищено до адміністратора.');
259	                fetchUsers();
260	            } else {
261	                showUIMessage(userManagementMessage, 'error', data.message || 'Не вдалося підвищити користувача.');
262	            }
263	        } catch (error) {
264	            showUIMessage(userManagementMessage, 'error', `Мережева помилка: ${error.message}`);
265	        }
266	    }
267	
268	
269	    // --- Статистика платформи ---
270	    platformStatsDaysFilter.addEventListener('change', fetchPlatformStats);
271	
272	    async function fetchPlatformStats() {
273	        const days = platformStatsDaysFilter.value;
274	        platformStatsCards.innerHTML = '<p>Завантаження статистики...</p>';
275	        try {
276	            const response = await fetch(`/api/users/platform/stats?days=${days}`, { //
277	                headers: { 'Authorization': `Bearer ${token}` }
278	            });
279	            const data = await response.json();
280	            if (response.ok) {
281	                displayPlatformStats(data.data);
282	            } else {
283	                platformStatsCards.innerHTML = `<p class="error">Помилка: ${data.message}</p>`;
284	            }
285	        } catch (error) {
286	            platformStatsCards.innerHTML = `<p class="error">Мережева помилка: ${error.message}</p>`;
287	        }
288	    }
289	
290	    function displayPlatformStats(stats) {
291	        platformStatsCards.innerHTML = ''; 
292	        
293	        function createStatCard(title, value) {
294	            const card = document.createElement('div');
295	            card.className = 'summary-card';
296	            card.innerHTML = `<h3>${title}</h3><p>${value}</p>`;
297	            platformStatsCards.appendChild(card);
298	        }
299	
300	        createStatCard('Загальна кількість користувачів', stats.users.total);
301	        createStatCard('Нові користувачі', `${stats.users.new} (за ${platformStatsDaysFilter.value} дн.)`);
302	        createStatCard('Адміністратори', stats.users.admins);
303	        createStatCard('Загальна кількість пристроїв', stats.devices.total);
304	        createStatCard('Пристроїв онлайн', stats.devices.online);
305	        createStatCard('Нові пристрої', `${stats.devices.new} (за ${platformStatsDaysFilter.value} дн.)`);
306	        createStatCard('Загальна кількість сповіщень', `${stats.alerts.total} (за ${platformStatsDaysFilter.value} дн.)`);
307	        createStatCard('Невирішених сповіщень', stats.alerts.unresolved);
308	        createStatCard('Критичних сповіщень', stats.alerts.critical);
309	        createStatCard('Обсяг даних (записів)', `${stats.data.volume} (за ${platformStatsDaysFilter.value} дн.)`);
310	
311	        renderUserRegistrationChart(stats.trends.userRegistrations);
312	        renderDeviceStatusChart(stats.devices);
313	    }
314	
315	    function renderUserRegistrationChart(trendData) {
316	        if (userRegChartInstance) userRegChartInstance.destroy();
317	        if (!trendData || trendData.length === 0) {
318	            userRegistrationChartCanvas.getContext('2d').fillText('Немає даних для тренду реєстрацій.', 10, 50);
319	            return;
320	        }
321	        const labels = trendData.map(d => `${d._id.day}/${d._id.month}/${d._id.year}`);
322	        const dataPoints = trendData.map(d => d.count);
323	
324	        userRegChartInstance = new Chart(userRegistrationChartCanvas, {
325	            type: 'line',
326	            data: { labels, datasets: [{ label: 'Реєстрації користувачів', data: dataPoints, borderColor: '#1a73e8', tension: 0.1 }] },
327	            options: { responsive: true, maintainAspectRatio: false }
328	        });
329	    }
330	    
331	    function renderDeviceStatusChart(deviceStats) {
332	        if (deviceStatusChartInstance) deviceStatusChartInstance.destroy();
333	         const data = {
334	            labels: ['Онлайн', 'Офлайн', 'Всього активних'],
335	            datasets: [{
336	                label: 'Статус пристроїв',
337	                data: [deviceStats.online, deviceStats.total - deviceStats.online, deviceStats.total],
338	                backgroundColor: ['#28a745', '#dc3545', '#007bff']
339	            }]
340	        };
341	        deviceStatusChartInstance = new Chart(deviceStatusChartCanvas, {
342	            type: 'bar',
343	            data: data,
344	            options: {
345	                responsive: true,
346	                maintainAspectRatio: false,
347	                scales: { y: { beginAtZero: true } },
348	                plugins: { legend: { display: false } }
349	            }
350	        });
351	    }
352	
353	
354	    // --- Моніторинг системи ---
355	    refreshHealthCheckBtn.addEventListener('click', fetchSystemHealth);
356	
357	    async function fetchSystemHealth() {
358	        serverInfoDisplay.innerHTML = '<p>Завантаження інформації про сервер...</p>';
359	        healthCheckDisplay.innerHTML = '<p>Завантаження стану системи...</p>';
360	        try {
361	            const response = await fetch('/health', { headers: { 'Authorization': `Bearer ${token}` } }); //
362	            const data = await response.json();
363	            if (response.ok) {
364	                displayServerInfo(data);
365	                displayHealthCheck(data);
366	            } else {
367	                serverInfoDisplay.innerHTML = `<p class="error">Помилка: ${data.message || 'Не вдалося завантажити інформацію'}</p>`;
368	                healthCheckDisplay.innerHTML = `<p class="error">Помилка: ${data.message || 'Не вдалося завантажити стан'}</p>`;
369	            }
370	        } catch (error) {
371	            serverInfoDisplay.innerHTML = `<p class="error">Мережева помилка: ${error.message}</p>`;
372	            healthCheckDisplay.innerHTML = `<p class="error">Мережева помилка: ${error.message}</p>`;
373	        }
374	    }
375	
376	    function displayServerInfo(healthData) {
377	        serverInfoDisplay.innerHTML = `
378	            <div class="summary-card"><h3>Версія API/Сервера</h3><p>${healthData.environment} (умовно)</p></div>
379	            <div class="summary-card"><h3>Час роботи сервера</h3><p>${(healthData.uptime / 3600).toFixed(2)} годин</p></div>
380	            <div class="summary-card"><h3>Використання пам'яті (Heap Total)</h3><p>${(healthData.memory.heapTotal / 1024 / 1024).toFixed(2)} MB</p></div>
381	            <div class="summary-card"><h3>Використання пам'яті (Heap Used)</h3><p>${(healthData.memory.heapUsed / 1024 / 1024).toFixed(2)} MB</p></div>
382	        `;
383	    }
384	
385	    function displayHealthCheck(healthData) {
386	        healthCheckDisplay.innerHTML = `
387	            <div class="summary-card">
388	                <h3>Статус сервера</h3>
389	                <p class="${healthData.status === 'OK' ? 'status-online' : 'status-offline'}">${healthData.status}</p>
390	            </div>
391	            <div class="summary-card"><h3>Час перевірки</h3><p>${new Date(healthData.timestamp).toLocaleString()}</p></div>
392	            <div class="summary-card"><h3>База даних</h3><p class="${healthData.database === 'connected' ? 'status-online' : 'status-offline'}">${healthData.database}</p></div>
393	            <div class="summary-card"><h3>MQTT Брокер</h3><p class="${healthData.mqtt === 'connected' ? 'status-online' : 'status-offline'}">${healthData.mqtt}</p></div>
394	        `;
395	    }
396	
397	    // --- Початкове завантаження ---
398	    initializeAdminPage();
399	});
Резервне копіювання користувацьких даних 
GitHub репозиторій: https://github.com/NureDobrovolskaMariia/apz-pzpi-22-2-dobrovolska-mariia
