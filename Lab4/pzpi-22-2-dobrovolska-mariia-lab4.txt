Міністерство освіти і науки України Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №4

З дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА МОБІЛЬНОГО КЛІЄНТА СИСТЕМИ»


Виконавець:
ст. гр. ПЗПІ-22-7							Добровольська М.А.

Перевірив:
ст. викладач каф. ПІ						Сокорчук І. П.











Харків 2025
 
1	ІСТОРІЯ ЗМІН


№	Дата	      Версія звіту	Опис	змін	та виправлень
1	27.05.2025	0.1	          Створено структуру звіту. Визначено завдання	на лабораторну роботу
2	29.05.2025	0.1	          Описано хід роботи, додаток А, додаток Б, додаток В. Сформульовано висновок роботи


2	ЗАВДАННЯ

Метою даного лабораторного заняття є розробка мобільної / mobile частини програмної системи.

3	ОПИС ВИКОНАНОЇ РОБОТИ


До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А.
У рамках виконання завдання було розроблено клієнтську частину мобільного додатку для платформи Android з використанням мови програмування Kotlin, що забезпечує інтерактивний та функціональний інтерфейс для системи автоматизації інкубації птахів. Розробку розпочато з ініціалізації проєкту в Android Studio, у ході якої було налаштовано структуру застосунку, підключено Retrofit2 для взаємодії з REST API, використано ViewModel з LiveData/StateFlow для реактивного оновлення інтерфейсу та забезпечено зберігання сесій авторизації через SharedPreferences.
Було створено ключові екрани, зокрема:
-	екран авторизації та реєстрації користувачів;
-	головний екран з переліком пристроїв інкубації (інкубаторів);
-	екран перегляду детальної інформації про окремий пристрій;
-	сторінка тривог (сповіщень) із фільтрацією за типами (критичні / усі);
-	сторінка зі статистикою сповіщень (всі, нерозв’язані, за типом);
-	екран профілю користувача з інформацією про акаунт, пристрої, налаштування алертів;
-	окрема сторінка редагування температурних і вологісних порогів для оповіщення.
Під час розробки особливу увагу було приділено інтуїтивності інтерфейсу, збереженню структурованості даних та забезпеченню двомовної підтримки (українська/англійська). Інтерфейс побудовано із використанням Material Design з адаптивною версткою та дотриманням єдиного стилю, спільного з веб-інтерфейсом системи. Для списків даних використано RecyclerView з ефективною перерисовкою через DiffUtil, а взаємодія з API реалізована через окремий шар репозиторіїв, що забезпечує ізоляцію логіки.
У рамках бізнес-логіки мобільного застосунку реалізовано:
-	завантаження й відображення даних пристроїв, їх статусу та останнього з'єднання;
-	отримання та фільтрація сповіщень за категоріями;
-	перегляд аналітики: кількість усіх, останніх та нерозв’язаних сповіщень;
-	редагування користувацьких налаштувань температури та вологості;
-	завантаження інформації про акаунт та дату реєстрації;
-	підтримка авторизації з обробкою токена JWT.
У результаті було створено повнофункціональний мобільний клієнт, що інтегрується з бекенд-системою інкубації, забезпечуючи повноцінну взаємодію користувача з його пристроями. Створений застосунок відповідає вимогам до системи Chicken Incubator Management System та готовий до подальшого розширення, зокрема впровадження real-time моніторингу на базі WebSocket або MQTT.
Деякий код застосунку наведено у додатку Б.

Прийняті інженерні рішення для мобільного застосунку
Під час розробки мобільного застосунку для системи автоматизації інкубації яєць було прийнято низку ключових технічних та архітектурних рішень, що забезпечили надійність, масштабованість та зручність використання IoT-платформи для користувачів різного рівня.

1.	Технологічний стек та мова програмування
Kotlin як основна мова розробки:
Застосунок розроблено мовою Kotlin, що забезпечує сучасний синтаксис, скорочує boilerplate-код та дозволяє зосередитися на бізнес-логіці. Kotlin повністю сумісна з Android SDK і рекомендована Google як мова для створення Android-додатків.
Material Design 3:
У застосунку використано дизайн-систему Material Design 3 з акцентом на простоту, адаптивність до розмірів екранів, підтримку світлої/темної теми та стилістичну єдність із веб-версією платформи.

2.	Архітектурні патерни та структура UI
MVVM (Model-View-ViewModel):
Для забезпечення розділення логіки UI та бізнес-логіки використано патерн MVVM з ViewModel, LiveData/StateFlow та репозиторіями, що дозволяє зручно масштабувати застосунок та підтримувати його у майбутньому.
Фрагментна структура UI:
Інтерфейс застосунку реалізовано на основі фрагментів, що дозволяє. Ізольовано працювати над окремими функціональними блоками. Керувати навігацією через Activities та Fragments. Зручно реалізувати підтримку навігації між екранами:
-	LoginActivity / RegisterActivity — автентифікація;
-	ResultsActivity — головна панель з пристроями;
-	DeviceDetailsActivity — перегляд конкретного інкубатора;
-	AlertsActivity та CriticalAlertsActivity — перегляд сповіщень;
-	AlertStatsActivity — статистика сповіщень;
-	ProfileActivity / SettingsActivity — профіль та налаштування.

3. Мережева взаємодія та API інтеграція
Retrofit + OkHttp:
Використано Retrofit для побудови HTTP-запитів з автоматичним парсингом JSON-відповідей та OkHttp інтерсептором для додавання JWT токену в кожен запит.
API інтерфейси:
-	AuthAPI — логін, реєстрація, профіль користувача;
-	DeviceAPI — отримання списку інкубаторів, додавання/редагування;
-	AlertAPI — перегляд усіх/критичних сповіщень;
-	StatsAPI — отримання статистичних даних користувача.

4. Багатошарова архітектура
Шар даних (data)
-	API інтерфейси з Retrofit
-	Data-класи: ProfileResponse, UserDevice, Alert, StatsResponse тощо
-	Репозиторії: ApiRepository, що інкапсулює всі запити
-	Мережева логіка — окремо виділена RetrofitInstance.kt
Шар UI (ui)
-	Екрани побудовано як окремі Activities для спрощення навігації
-	Списки реалізовано через RecyclerView + ListAdapter
-	Динамічна побудова інтерфейсу з ViewBinding
Шар логіки (viewmodel)
-	DeviceViewModel, AuthViewModel, AlertsViewModel — основна бізнес-логіка з LiveData або StateFlow
-	Розділення запитів, обробки помилок, збереження стану інтерфейсу

5. Безпека, авторизація та сесії
JWT-токени:
Під час автентифікації використовується JWT-токен, що зберігається у SharedPreferences. При кожному мережевому запиті він автоматично додається у заголовки запиту через інтерсептор OkHttp.
Ролі користувачів:
Застосунок підтримує розмежування доступу для користувачів з різними правами (наприклад, звичайний користувач, адміністратор).

6. UX
Адаптивність:
Усі компоненти інтерфейсу масштабуються для різних розмірів екранів. Пріоритет надано легкості у використанні та логічній структурі подачі інформації.

7. Масштабованість і розширення
Модульність:
Завдяки чіткій структурі проєкт легко розширювати — можна додавати:
-	нові типи сповіщень;
-	інші IoT-пристрої (наприклад, датчики СО2, освітлення тощо);
-	аналітику з графіками;
-	MQTT/WebSocket для real-time режиму.
Інтеграція:
Клієнтський застосунок може бути повністю синхронізований із бекендом, розгорнутим на Node.js з Express.

Опис взаємодії компонентів мобільного застосунку
Мобільний застосунок системи автоматизації інкубації яєць побудований на сучасній архітектурі, орієнтованій на модульність, масштабованість і зручність підтримки. Основу взаємодії складають чітко структуровані компоненти: Activities, ViewModels, Repositories, API інтерфейси, Models, а також адаптивні UI компоненти.

1. Архітектурна структура та навігація
MainActivity.kt виступає центральним навігаційним вузлом застосунку, що ініціалізує початкові екрани й обробляє переходи між ними. Структура побудована з використанням Intent-навігації:
val intent = Intent(this, DeviceDetailsActivity::class.java)
intent.putExtra("deviceId", device._id)
startActivity(intent)

Після авторизації користувача автоматично перекидає до ResultsActivity, де відображаються всі підключені пристрої:
val intent = Intent(this@LoginActivity, ResultsActivity::class.java)
startActivity(intent)
finish()

2. Структура екранних компонентів
Кожен логічний екран винесено в окрему Activity, відповідальну за окремий функціонал:
-	LoginActivity / RegisterActivity – автентифікація.
-	ResultsActivity – головний екран з пристроями.
-	DeviceDetailsActivity – перегляд характеристик пристрою.
-	AlertActivity – список сповіщень.
-	AlertStatsActivity – статистика тривог.
-	ProfileActivity – профіль користувача.
-	SettingsActivity – налаштування температури та вологості.

3. ViewModel-шар та управління станом
ViewModel-класи відповідають за асинхронну обробку запитів і керування станом екранів:
class DevicesViewModel : ViewModel() {
    private val repository = ApiRepository()
    val devices = MutableLiveData<List<Device>>()

    fun fetchDevices() {
        viewModelScope.launch {
            val response = repository.getDevices()
            if (response.isSuccessful) {
                devices.value = response.body()?.data ?: emptyList()
            }
        }
    }
}

4. Репозиторії та інтеграція з API
Репозиторії, такі як ApiRepository.kt, забезпечують взаємодію з API через Retrofit:
suspend fun getDevices(): Response<DevicesResponse> {
    return RetrofitInstance.api.getAllDevices()
}

suspend fun getAlertStats(): Response<AlertStatsResponse> {
    return RetrofitInstance.api.getAlertStats()
}

Інтерфейс ApiService.kt визначає всі REST-ендпоїнти:
@GET("/api/devices")
suspend fun getAllDevices(): Response<DevicesResponse>

@GET("/alerts/statistics")
suspend fun getAlertStats(): Response<AlertStatsResponse>

@GET("/auth/profile")
suspend fun getProfile(): Response<ProfileResponse>


5. Моделі даних і мапінг JSON
Дані, що приходять з бекенду, мапляться у data-класи. Наприклад, модель профілю користувача:
data class ProfileResponse(
    val status: String,
    val data: ProfileData
)

data class ProfileData(
    val user: User
)

Статистика з /auth/stats:
data class UserStatsResponse(
    val status: String,
    val data: UserStatsData
)

data class UserStatsData(
    val deviceCount: Int,
    val recentAlertsCount: Int,
    val unresolvedAlertsCount: Int,
    val memberSince: String
)

6. Відображення даних у UI
Для побудови UI використано RecyclerView з кастомними адаптерами:
class DeviceAdapter(...) : RecyclerView.Adapter<DeviceAdapter.DeviceViewHolder>() {
    override fun onBindViewHolder(holder: DeviceViewHolder, position: Int) {
        val device = devices[position]
        holder.deviceName.text = device.name
        holder.status.text = device.status
    }
}
Кожна сторінка має індивідуальну розмітку: наприклад, activity_profile.xml:
<TextView
    android:id="@+id/textViewName"
    android:text="Ім’я користувача"
    android:textStyle="bold"
    android:layout_marginTop="16dp"
    ... />

7. Передача даних між екранами
Використано Intent.putExtra() для передачі deviceId між активностями:
val intent = Intent(context, DeviceDetailsActivity::class.java)
intent.putExtra("deviceId", device._id)
startActivity(intent)

8. Валідація, безпека та авторизація
JWT-токен зберігається в SharedPreferences для авторизованого доступу:
val token = sharedPreferences.getString("jwt_token", "")
val header = "Bearer $token"
Кожен запит Retrofit підписується токеном:
val client = OkHttpClient.Builder()
    .addInterceptor { chain ->
        val request = chain.request().newBuilder()
            .addHeader("Authorization", header)
            .build()
        chain.proceed(request)
    }.build()

9. Налаштування температури/вологості
На екрані SettingsActivity користувач може змінити діапазон температури і вологості. Приклад обробника:
buttonSave.setOnClickListener {
    val minTemp = temperatureMinInput.text.toString().toIntOrNull()
    val maxTemp = temperatureMaxInput.text.toString().toIntOrNull()
    val newSettings = AlertSettings(Range(minTemp!!, maxTemp!!), ...)
    repository.updateProfileSettings(newSettings)
}

10. Взаємодія з IoT через бекенд
Хоча прямого з’єднання з IoT-пристроями немає, мобільний застосунок через API керує:
-	списком пристроїв (GET /api/devices)
-	сповіщеннями (GET /alerts, GET /alerts/critical)
-	налаштуваннями користувача (POST /auth/profile)
-	аналітикою (GET /alerts/statistics, GET /auth/stats)
 
ВИСНОВКИ

У ході виконання лабораторної роботи було реалізовано повноцінну клієнтську частину мобільного застосунку для Android, розроблену мовою Kotlin, яка забезпечує інтуїтивно зрозумілий доступ до функцій моніторингу та керування системою автоматизованої інкубації яєць. Застосунок включає набір основних екранів, таких як реєстрація, вхід, головна панель з переліком підключених пристроїв, розділ сповіщень, сторінки профілю користувача, налаштування параметрів сповіщень, а також візуалізацію статистичних даних.
Було реалізовано двосторонню взаємодію з серверною частиною через RESTful API, що дозволяє отримувати поточну інформацію про стан пристроїв, зчитувати критичні алерти, зберігати налаштування діапазонів температури та вологості, а також оновлювати профіль користувача. Всі запити захищено за допомогою JWT-автентифікації, що забезпечує безпечну передачу даних.
Проєкт побудовано за архітектурною моделлю MVVM, що забезпечило чітке розділення логіки, UI та управління станом за допомогою ViewModel та StateFlow. Для мережевої взаємодії було застосовано Retrofit у зв’язці з OkHttp, що дозволило ефективно обробляти запити та відповіді серверу. Дизайн додатку базується на Material Design 3, із підтримкою темної теми, адаптивної верстки та локалізації двома мовами (українською та англійською), що значно покращує досвід користувача.
Розроблений застосунок не лише забезпечує контроль інкубаційного процесу, а й надає користувачеві зручні засоби для перегляду історичних сповіщень, статистики, швидкого доступу до своїх пристроїв та гнучкого налаштування критичних порогів. Таким чином, створено надійний інструмент для дистанційного моніторингу інкубаторів, що повністю відповідає вимогам сучасних IoT-рішень у сфері аграрної автоматизації.

 
ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи:

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/GobacCPDq10


Хронологічний опис відеозапису:

00:15 - Вхід у аккаунт
01:04 - Головна сторінка
01:23 - Сторінка деталей про девайс
01:41 - Сторінка тривог
02:16 - Статистика тривог
02:48 - Сторінка додававння пристрою
02:55 - Мій профіль
03:33 - Налаштування профілю 

ДОДАТОК Б


Рисунок Б.1 — ER-діаграма даних

Рисунок Б.2 — Структура бази даних 

Рисунок Б.3 — UML-діаграма прецедентів

ДОДАТОК В
Програмний код

GitHub репозиторій: https://github.com/NureDobrovolskaMariia/apz-pzpi-22-2-dobrovolska-mariia/tree/main/Lab4/pzpi-22-2-dobrovolska-mariia-lab4


В.1 Математична обробка прикладних даних.
1	package com.example.apz_lab4.math
2	import com.example.apz_lab4.models.Alert
3	import java.text.SimpleDateFormat
4	import java.util.*
5	import kotlin.math.roundToInt

6	class AlertDataProcessor(private val alerts: List<Alert>) {

7	fun totalAlerts(): Int = alerts.size

8	fun resolvedAlerts(): Int = alerts.count { it.status == "resolved" }

9	fun unresolvedAlerts(): Int = alerts.count { it.status != "resolved" }

10	fun temperatureAlerts(): Int = alerts.count { it.type == "temperature" }

11	fun humidityAlerts(): Int = alerts.count { it.type == "humidity" }

12	fun criticalAlerts(): Int = alerts.count { it.severity == "critical" }

13	fun percentageResolved(): Double {
14	if (alerts.isEmpty()) return 0.0
15	return (resolvedAlerts().toDouble() / totalAlerts()) * 100
16	}

17	fun percentageCritical(): Double {
18	if (alerts.isEmpty()) return 0.0
19	return (criticalAlerts().toDouble() / totalAlerts()) * 100
20	}

21	fun averageResponseTimeMinutes(): Double {
22	val format = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
23	val times = alerts.mapNotNull { alert ->
24	val created = format.parse(alert.createdAt)
25	val resolved = alert.resolvedAt?.let { format.parse(it) }
26	if (created != null && resolved != null) {
27	(resolved.time - created.time) / 1000.0 / 60.0
28	} else null
29	}
30	return if (times.isNotEmpty()) times.average() else 0.0
31	}

32	fun summary(): String {
33	val resolved = resolvedAlerts()
34	val unresolved = unresolvedAlerts()
35	val critical = criticalAlerts()
36	val temp = temperatureAlerts()
37	val hum = humidityAlerts()
38	val avgTime = averageResponseTimeMinutes()
39	return """
40	Загальна кількість алертів: $totalAlerts()
41	Вирішено: $resolved (${percentageResolved().roundToInt()}%)
42	Невирішено: $unresolved
43	Критичних: $critical (${percentageCritical().roundToInt()}%)
44	Температурних: $temp
45	Вологісних: $hum
46	Середній час реакції: ${"%.2f".format(avgTime)} хв
47	""".trimIndent()
48	}
49	}

В.2 Адміністрування бізнес-логіки системи.
GitHub репозиторій: https://github.com/NureDobrovolskaMariia/apz-pzpi-22-2-dobrovolska-mariia


1	document.addEventListener('DOMContentLoaded', async () => {
2	    console.log('DOM Content Loaded for admin page.');
3	
4	    const token = localStorage.getItem('jwtToken');
5	    if (!token) {
6	        window.location.href = '/html/login.html';
7	        return;
8	    }
9	
10	    // Елементи навігації
11	    const userNameNav = document.getElementById('userNameNav');
12	    const userRoleNav = document.getElementById('userRoleNav');
13	    const adminPanelLink = document.getElementById('adminPanelLink'); 
14	    const logoutBtnDropdown = document.getElementById('logoutBtnDropdown');
15	    const userDropdownTrigger = document.getElementById('userDropdownTrigger');
16	    const userDropdown = document.getElementById('userDropdown');
17	
18	    // Елементи вкладок
19	    const tabLinks = document.querySelectorAll('.tab-link');
20	    const tabContents = document.querySelectorAll('.tab-content');
21	
22	    // Керування користувачами
23	    const usersTableBody = document.getElementById('usersTableBody');
24	    const userSearchInput = document.getElementById('userSearchInput');
25	    const userRoleFilter = document.getElementById('userRoleFilter');
26	    const userActiveFilter = document.getElementById('userActiveFilter');
27	    const applyUserFiltersBtn = document.getElementById('applyUserFiltersBtn');
28	    const prevUserPageBtn = document.getElementById('prevUserPageBtn');
29	    const currentUserPageSpan = document.getElementById('currentUserPageSpan');
30	    const nextUserPageBtn = document.getElementById('nextUserPageBtn');
31	    const userManagementMessage = document.getElementById('userManagementMessage');
32	    let currentUserPage = 1;
33	    const usersPerPage = 10;
34	
35	    // Модальне вікно редагування користувача
36	    const editUserRoleModal = document.getElementById('editUserRoleModal');
37	    const modalUserId = document.getElementById('modalUserId');
38	    const modalUserName = document.getElementById('modalUserName');
39	    const modalUserEmail = document.getElementById('modalUserEmail');
40	    const modalUserRoleSelect = document.getElementById('modalUserRoleSelect');
41	    const modalUserIsActive = document.getElementById('modalUserIsActive');
42	    const saveUserRoleBtn = document.getElementById('saveUserRoleBtn');
43	    const editUserModalMessage = document.getElementById('editUserModalMessage');
44	    const closeButton = editUserRoleModal.querySelector('.close-button');
45	
46	
47	    // Статистика платформи
48	    const platformStatsDaysFilter = document.getElementById('platformStatsDaysFilter');
49	    const platformStatsCards = document.getElementById('platformStatsCards');
50	    const userRegistrationChartCanvas = document.getElementById('userRegistrationChart');
51	    const deviceStatusChartCanvas = document.getElementById('deviceStatusChart');
52	    let userRegChartInstance, deviceStatusChartInstance;
53	
54	    // Моніторинг системи
55	    const serverInfoDisplay = document.getElementById('serverInfoDisplay');
56	    const healthCheckDisplay = document.getElementById('healthCheckDisplay');
57	    const refreshHealthCheckBtn = document.getElementById('refreshHealthCheckBtn');
58	    
59	    // --- Допоміжні функції ---
60	    function showUIMessage(element, type, text) {
61	        if (!element) return;
62	        element.textContent = text;
63	        element.className = `message-area ${type}`;
64	        element.style.display = 'block';
65	        setTimeout(() => { element.style.display = 'none'; }, 5000);
66	    }
67	
68	    if (userDropdownTrigger) {
69	        userDropdownTrigger.addEventListener('click', (e) => {
70	            e.stopPropagation(); userDropdown.classList.toggle('show');
71	        });
72	        window.addEventListener('click', (e) => {
73	            if (userDropdown.classList.contains('show') && !userDropdownTrigger.contains(e.target) && !userDropdown.contains(e.target)) {
74	                userDropdown.classList.remove('show');
75	            }
76	        });
77	    }
78	    if (logoutBtnDropdown) {
79	        logoutBtnDropdown.addEventListener('click', () => {
80	            localStorage.removeItem('jwtToken'); window.location.href = '/html/login.html';
81	        });
82	    }
83	    
84	    // --- Перевірка ролі та завантаження профілю для навігації ---
85	    async function initializeAdminPage() {
86	        try {
87	            const response = await fetch('/api/auth/profile', {
88	                headers: { 'Authorization': `Bearer ${token}` }
89	            });
90	            const data = await response.json();
91	            if (response.ok) {
92	                const user = data.data.user;
93	                userNameNav.textContent = user.name;
94	                userRoleNav.textContent = user.role.charAt(0).toUpperCase() + user.role.slice(1);
95	                if (user.role !== 'admin') {
96	                    alert('Доступ заборонено. Ця сторінка лише для адміністраторів.');
97	                    window.location.href = '/html/dashboard.html';
98	                    return;
99	                }
100	                adminPanelLink.style.display = 'block'; // Переконатися, що посилання видиме
101	                 loadTabData('user-management'); // Завантажити дані для першої вкладки
102	            } else {
103	                localStorage.removeItem('jwtToken'); window.location.href = '/html/login.html';
104	            }
105	        } catch (error) {
106	            console.error('Network error fetching profile:', error);
107	            localStorage.removeItem('jwtToken'); window.location.href = '/html/login.html';
108	        }
109	    }
110	
111	    // --- Логіка перемикання вкладок ---
112	    tabLinks.forEach(link => {
113	        link.addEventListener('click', () => {
114	            tabLinks.forEach(item => item.classList.remove('active'));
115	            tabContents.forEach(content => content.classList.remove('active'));
116	            link.classList.add('active');
117	            const targetTabId = link.dataset.tab + 'Tab';
118	            document.getElementById(targetTabId).classList.add('active');
119	            loadTabData(link.dataset.tab);
120	        });
121	    });
122	
123	    function loadTabData(tabId) {
124	        console.log("Loading data for tab:", tabId);
125	        switch (tabId) {
126	            case 'user-management':
127	                fetchUsers();
128	                break;
129	            case 'platform-stats':
130	                fetchPlatformStats();
131	                break;
132	            case 'system-monitoring':
133	                fetchSystemHealth();
134	                break;
135	        }
136	    }
137	
138	    // --- Керування користувачами ---
139	    async function fetchUsers() {
140	        const searchTerm = userSearchInput.value;
141	        const role = userRoleFilter.value;
142	        const isActive = userActiveFilter.value;
143	
144	        let query = `page=${currentUserPage}&limit=${usersPerPage}`;
145	        if (searchTerm) query += `&search=${encodeURIComponent(searchTerm)}`;
146	        if (role) query += `&role=${role}`;
147	        if (isActive !== "") query += `&isActive=${isActive}`;
148	
149	        usersTableBody.innerHTML = '<tr><td colspan="6">Завантаження користувачів...</td></tr>';
150	        try {
151	            const response = await fetch(`/api/users?${query}`, { //
152	                headers: { 'Authorization': `Bearer ${token}` }
153	            });
154	            const data = await response.json();
155	            if (response.ok) {
156	                displayUsersTable(data.data.users, data.pagination);
157	            } else {
158	                usersTableBody.innerHTML = `<tr><td colspan="6">Помилка: ${data.message}</td></tr>`;
159	            }
160	        } catch (error) {
161	            usersTableBody.innerHTML = `<tr><td colspan="6">Мережева помилка: ${error.message}</td></tr>`;
162	        }
163	    }
164	
165	    function displayUsersTable(users, pagination) {
166	        usersTableBody.innerHTML = '';
167	        if (users.length === 0) {
168	            usersTableBody.innerHTML = '<tr><td colspan="6">Користувачів не знайдено.</td></tr>';
169	        } else {
170	            users.forEach(user => {
171	                const row = usersTableBody.insertRow();
172	                row.insertCell().textContent = user._id;
173	                row.insertCell().textContent = user.name;
174	                row.insertCell().textContent = user.email;
175	                row.insertCell().textContent = user.role;
176	                row.insertCell().innerHTML = user.isActive ? 
177	                    '<span class="status-indicator status-online">Так</span>' : 
178	                    '<span class="status-indicator status-offline">Ні</span>';
179	
180	                const actionsCell = row.insertCell();
181	                const editBtn = document.createElement('button');
182	                editBtn.className = 'btn btn-sm primary-btn';
183	                editBtn.textContent = 'Редагувати';
184	                editBtn.onclick = () => openEditUserModal(user);
185	                actionsCell.appendChild(editBtn);
186	                
187	                const promoteBtn = document.createElement('button');
188	                promoteBtn.className = 'btn btn-sm secondary-btn ml-5';
189	                promoteBtn.textContent = 'Підвищити до Admin';
190	                promoteBtn.disabled = user.role === 'admin';
191	                promoteBtn.onclick = () => promoteUserToAdmin(user._id, user.name);
192	                actionsCell.appendChild(promoteBtn);
193	            });
194	        }
195	        currentUserPageSpan.textContent = `Сторінка ${pagination.page} з ${pagination.pages || 1}`;
196	        prevUserPageBtn.disabled = pagination.page === 1;
197	        nextUserPageBtn.disabled = pagination.page === pagination.pages || pagination.pages === 0;
198	    }
199	
200	    applyUserFiltersBtn.addEventListener('click', () => { currentUserPage = 1; fetchUsers(); });
201	    prevUserPageBtn.addEventListener('click', () => { if (currentUserPage > 1) { currentUserPage--; fetchUsers(); } });
202	    nextUserPageBtn.addEventListener('click', () => { currentUserPage++; fetchUsers(); });
203	
204	    function openEditUserModal(user) {
205	        modalUserId.value = user._id;
206	        modalUserName.textContent = user.name;
207	        modalUserEmail.textContent = user.email;
208	        modalUserRoleSelect.value = user.role;
209	        modalUserIsActive.checked = user.isActive;
210	        editUserModalMessage.style.display = 'none';
211	        editUserRoleModal.style.display = 'flex';
212	    }
213	    
214	    if(closeButton) {
215	       closeButton.onclick = () => editUserRoleModal.style.display = 'none';
216	    }
217	    window.onclick = (event) => {
218	      if (event.target == editUserRoleModal) {
219	        editUserRoleModal.style.display = "none";
220	      }
221	    }
222	
223	    saveUserRoleBtn.addEventListener('click', async () => {
224	        const userId = modalUserId.value;
225	        const newRole = modalUserRoleSelect.value;
226	        const isActive = modalUserIsActive.checked;
227	
228	        try {
229	            const response = await fetch(`/api/users/${userId}`, { 
230	                method: 'PATCH',
231	                headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
232	                body: JSON.stringify({ role: newRole, isActive: isActive })
233	            });
234	            const data = await response.json();
235	            if (response.ok) {
236	                showUIMessage(editUserModalMessage, 'success', 'Дані користувача оновлено!');
237	                fetchUsers();
238	                setTimeout(() => { editUserRoleModal.style.display = 'none'; }, 1500);
239	            } else {
240	                showUIMessage(editUserModalMessage, 'error', `Помилка: ${data.message}`);
241	            }
242	        } catch (error) {
243	            showUIMessage(editUserModalMessage, 'error', `Мережева помилка: ${error.message}`);
244	        }
245	    });
246	
247	    async function promoteUserToAdmin(userId, userName) {
248	        if (!confirm(`Ви впевнені, що хочете підвищити користувача ${userName} (${userId}) до адміністратора?`)) {
249	            return;
250	        }
251	        try {
252	            const response = await fetch(`/api/users/${userId}/promote`, { 
253	                method: 'PATCH',
254	                headers: { 'Authorization': `Bearer ${token}` }
255	            });
256	            const data = await response.json();
257	            if (response.ok) {
258	                showUIMessage(userManagementMessage, 'success', data.message || 'Користувача підвищено до адміністратора.');
259	                fetchUsers();
260	            } else {
261	                showUIMessage(userManagementMessage, 'error', data.message || 'Не вдалося підвищити користувача.');
262	            }
263	        } catch (error) {
264	            showUIMessage(userManagementMessage, 'error', `Мережева помилка: ${error.message}`);
265	        }
266	    }
267	
268	
269	    // --- Статистика платформи ---
270	    platformStatsDaysFilter.addEventListener('change', fetchPlatformStats);
271	
272	    async function fetchPlatformStats() {
273	        const days = platformStatsDaysFilter.value;
274	        platformStatsCards.innerHTML = '<p>Завантаження статистики...</p>';
275	        try {
276	            const response = await fetch(`/api/users/platform/stats?days=${days}`, { //
277	                headers: { 'Authorization': `Bearer ${token}` }
278	            });
279	            const data = await response.json();
280	            if (response.ok) {
281	                displayPlatformStats(data.data);
282	            } else {
283	                platformStatsCards.innerHTML = `<p class="error">Помилка: ${data.message}</p>`;
284	            }
285	        } catch (error) {
286	            platformStatsCards.innerHTML = `<p class="error">Мережева помилка: ${error.message}</p>`;
287	        }
288	    }
289	
290	    function displayPlatformStats(stats) {
291	        platformStatsCards.innerHTML = ''; 
292	        
293	        function createStatCard(title, value) {
294	            const card = document.createElement('div');
295	            card.className = 'summary-card';
296	            card.innerHTML = `<h3>${title}</h3><p>${value}</p>`;
297	            platformStatsCards.appendChild(card);
298	        }
299	
300	        createStatCard('Загальна кількість користувачів', stats.users.total);
301	        createStatCard('Нові користувачі', `${stats.users.new} (за ${platformStatsDaysFilter.value} дн.)`);
302	        createStatCard('Адміністратори', stats.users.admins);
303	        createStatCard('Загальна кількість пристроїв', stats.devices.total);
304	        createStatCard('Пристроїв онлайн', stats.devices.online);
305	        createStatCard('Нові пристрої', `${stats.devices.new} (за ${platformStatsDaysFilter.value} дн.)`);
306	        createStatCard('Загальна кількість сповіщень', `${stats.alerts.total} (за ${platformStatsDaysFilter.value} дн.)`);
307	        createStatCard('Невирішених сповіщень', stats.alerts.unresolved);
308	        createStatCard('Критичних сповіщень', stats.alerts.critical);
309	        createStatCard('Обсяг даних (записів)', `${stats.data.volume} (за ${platformStatsDaysFilter.value} дн.)`);
310	
311	        renderUserRegistrationChart(stats.trends.userRegistrations);
312	        renderDeviceStatusChart(stats.devices);
313	    }
314	
315	    function renderUserRegistrationChart(trendData) {
316	        if (userRegChartInstance) userRegChartInstance.destroy();
317	        if (!trendData || trendData.length === 0) {
318	            userRegistrationChartCanvas.getContext('2d').fillText('Немає даних для тренду реєстрацій.', 10, 50);
319	            return;
320	        }
321	        const labels = trendData.map(d => `${d._id.day}/${d._id.month}/${d._id.year}`);
322	        const dataPoints = trendData.map(d => d.count);
323	
324	        userRegChartInstance = new Chart(userRegistrationChartCanvas, {
325	            type: 'line',
326	            data: { labels, datasets: [{ label: 'Реєстрації користувачів', data: dataPoints, borderColor: '#1a73e8', tension: 0.1 }] },
327	            options: { responsive: true, maintainAspectRatio: false }
328	        });
329	    }
330	    
331	    function renderDeviceStatusChart(deviceStats) {
332	        if (deviceStatusChartInstance) deviceStatusChartInstance.destroy();
333	         const data = {
334	            labels: ['Онлайн', 'Офлайн', 'Всього активних'],
335	            datasets: [{
336	                label: 'Статус пристроїв',
337	                data: [deviceStats.online, deviceStats.total - deviceStats.online, deviceStats.total],
338	                backgroundColor: ['#28a745', '#dc3545', '#007bff']
339	            }]
340	        };
341	        deviceStatusChartInstance = new Chart(deviceStatusChartCanvas, {
342	            type: 'bar',
343	            data: data,
344	            options: {
345	                responsive: true,
346	                maintainAspectRatio: false,
347	                scales: { y: { beginAtZero: true } },
348	                plugins: { legend: { display: false } }
349	            }
350	        });
351	    }
352	
353	
354	    // --- Моніторинг системи ---
355	    refreshHealthCheckBtn.addEventListener('click', fetchSystemHealth);
356	
357	    async function fetchSystemHealth() {
358	        serverInfoDisplay.innerHTML = '<p>Завантаження інформації про сервер...</p>';
359	        healthCheckDisplay.innerHTML = '<p>Завантаження стану системи...</p>';
360	        try {
361	            const response = await fetch('/health', { headers: { 'Authorization': `Bearer ${token}` } }); //
362	            const data = await response.json();
363	            if (response.ok) {
364	                displayServerInfo(data);
365	                displayHealthCheck(data);
366	            } else {
367	                serverInfoDisplay.innerHTML = `<p class="error">Помилка: ${data.message || 'Не вдалося завантажити інформацію'}</p>`;
368	                healthCheckDisplay.innerHTML = `<p class="error">Помилка: ${data.message || 'Не вдалося завантажити стан'}</p>`;
369	            }
370	        } catch (error) {
371	            serverInfoDisplay.innerHTML = `<p class="error">Мережева помилка: ${error.message}</p>`;
372	            healthCheckDisplay.innerHTML = `<p class="error">Мережева помилка: ${error.message}</p>`;
373	        }
374	    }
375	
376	    function displayServerInfo(healthData) {
377	        serverInfoDisplay.innerHTML = `
378	            <div class="summary-card"><h3>Версія API/Сервера</h3><p>${healthData.environment} (умовно)</p></div>
379	            <div class="summary-card"><h3>Час роботи сервера</h3><p>${(healthData.uptime / 3600).toFixed(2)} годин</p></div>
380	            <div class="summary-card"><h3>Використання пам'яті (Heap Total)</h3><p>${(healthData.memory.heapTotal / 1024 / 1024).toFixed(2)} MB</p></div>
381	            <div class="summary-card"><h3>Використання пам'яті (Heap Used)</h3><p>${(healthData.memory.heapUsed / 1024 / 1024).toFixed(2)} MB</p></div>
382	        `;
383	    }
384	
385	    function displayHealthCheck(healthData) {
386	        healthCheckDisplay.innerHTML = `
387	            <div class="summary-card">
388	                <h3>Статус сервера</h3>
389	                <p class="${healthData.status === 'OK' ? 'status-online' : 'status-offline'}">${healthData.status}</p>
390	            </div>
391	            <div class="summary-card"><h3>Час перевірки</h3><p>${new Date(healthData.timestamp).toLocaleString()}</p></div>
392	            <div class="summary-card"><h3>База даних</h3><p class="${healthData.database === 'connected' ? 'status-online' : 'status-offline'}">${healthData.database}</p></div>
393	            <div class="summary-card"><h3>MQTT Брокер</h3><p class="${healthData.mqtt === 'connected' ? 'status-online' : 'status-offline'}">${healthData.mqtt}</p></div>
394	        `;
395	    }
396	
397	    // --- Початкове завантаження ---
398	    initializeAdminPage();
399	});
Резервне копіювання користувацьких даних 
GitHub репозиторій: https://github.com/NureDobrovolskaMariia/apz-pzpi-22-2-dobrovolska-mariia
